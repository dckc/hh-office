# -*- coding: utf-8 -*-
## File originall autogenerated by SQLAutoCode
## see http://code.google.com/p/sqlautocode/

from sqlalchemy import (INTEGER, TEXT, VARCHAR, DECIMAL, DATE, TIMESTAMP,
                        BOOLEAN, Enum, types, text)
from sqlalchemy import Table, Column, ForeignKey, Index, create_engine
from sqlalchemy import orm
from sqlalchemy.schema import CreateTable
from sqlalchemy.ext.declarative import declarative_base, declared_attr

TextLine = VARCHAR(length=120)
TextCode = VARCHAR(length=40)
Money = DECIMAL(precision=8, scale=2)

class _Base(object):
    @declared_attr
    def __tablename__(cls):
        return cls.__name__

    __table_args__ = {'mysql_engine': 'InnoDB'}

    def __init__(self, **args):
        for k, v in args.items():
            setattr(self, k, v)


Base = declarative_base(cls=_Base)
metadata = Base.metadata

class IntId(object):
    id = Column(types.Integer, primary_key=True)


class Migrated(object):
    id_zoho = Column(TextCode)
    id_dabble = Column(TextCode)


class Audited(object):
    added_time = Column(TIMESTAMP(), nullable=False)
    added_user = Column(TextCode)
    modified_time = Column(TIMESTAMP(), nullable=False)
    modified_user = Column(TextCode)


class Client(IntId, Migrated, Audited, Base):
    name = Column(TextLine, nullable=False)

    reduced_fee = Column(TextLine)

    # TODO: phase this out.
    note = Column(TEXT())

    address = Column(TextLine)
    city = Column(types.String(24))
    state = Column(types.String(3))
    zip = Column(types.String(12))

    phone = Column(types.String(15))
    DOB = Column(DATE)
    Officer_id = Column(INTEGER(),
                        ForeignKey('Officer.id', ondelete="SET NULL"))
    Lawyer_id = Column(INTEGER(),
                       ForeignKey('Officer.id', ondelete="SET NULL"))
    Court_id = Column(INTEGER(),
                      ForeignKey('Office.id', ondelete="SET NULL"))
    file = Column(TextCode)
    file_site = Column(Enum('op', 'kck'))
    file_opened = Column(DATE())
    billing_cutoff = Column(DATE())
    recent = Column(DATE())
    charges = Column(Money)
    client_paid = Column(Money)
    insurance_paid = Column(Money)
    balance = Column(Money)
    balance_cached = Column(TIMESTAMP())


# Indexes for restoring from backup
Index('client_id_zoho', Client.__table__.c.id_zoho, unique=False)
Index('dab', Client.__table__.c.id_dabble, unique=False)


class Group(IntId, Migrated, Audited, Base):
    name = Column(TextLine, nullable=False)
    rate = Column(Money, nullable=False)
    evaluation = Column(BOOLEAN(), server_default=text('0'))
    cpt = Column(types.String(6), ForeignKey('Procedure.cpt'))


Office = Table('Office', metadata,
               Column(u'id', INTEGER(), primary_key=True, nullable=False),
               Column(u'name', TextLine, nullable=False),
               Column(u'address', TextLine),
               Column(u'fax', TextLine),
               Column(u'notes', TEXT()),
               Column(u'id_zoho', TextCode),
               Column(u'id_dabble', TextCode),
               Column('added_time', TIMESTAMP()),
               Column('added_user', TextCode),
               Column('modified_time', TIMESTAMP()),
               Column('modified_user', TextCode),
               mysql_engine='InnoDB'
               )


Officer = Table('Officer', metadata,
                Column(u'id', INTEGER(), primary_key=True, nullable=False),
                Column(u'name', TextLine, nullable=False),
                Column(u'email', TextLine),
                Column(u'Office_id', INTEGER(),
                       ForeignKey('Office.id', ondelete="SET NULL")),
                Column(u'id_zoho', TextCode),
                Column(u'id_dabble', TextCode),
                Column('added_time', TIMESTAMP()),
                Column('added_user', TextCode),
                Column('modified_time', TIMESTAMP()),
                Column('modified_user', TextCode),
                mysql_engine='InnoDB'
                )


Session =  Table('Session', metadata,
                 Column(u'id', INTEGER(), primary_key=True, nullable=False),
                 Column(u'session_date', DATE(), nullable=False),
                 Column(u'time', TextCode),
                 Column(u'Group_id', INTEGER(),
                        ForeignKey('Group.id', ondelete="CASCADE"),
                        nullable=False),
                 Column(u'Therapist_id', INTEGER(),
                        ForeignKey('Therapist.id', ondelete="SET NULL")),
                 Column(u'id_zoho', TextCode),
                 Column(u'id_dabble', TextCode),
                 Column('added_time', TIMESTAMP()),
                 Column('added_user', TextCode),
                 Column('modified_time', TIMESTAMP()),
                 Column('modified_user', TextCode),
                 mysql_engine='InnoDB'
                 )

Index(u'session_id_zoho', Session.c.id_zoho, unique=False)
Index(u'session_dabble', Session.c.id_dabble, unique=False)

Therapist =  Table('Therapist', metadata,
                   Column(u'id', INTEGER(), primary_key=True, nullable=False),
                   Column(u'name', TextLine, nullable=False),
                   Column('weight', INTEGER()),
                   Column('npi', VARCHAR(length=10)),
                   Column('tax_id', VARCHAR(length=15)),
                   Column('address', VARCHAR(length=29)),
                   Column('city_st_zip', VARCHAR(length=29)),
                   Column('added_time', TIMESTAMP()),
                   Column('added_user', TextCode),
                   Column('modified_time', TIMESTAMP()),
                   Column('modified_user', TextCode),
                   mysql_engine='InnoDB'
                   )

Index(u'Therapist_name', Therapist.c.name, unique=True)

Visit =  Table('Visit', metadata,
               Column(u'id', INTEGER(), primary_key=True, nullable=False),
               Column(u'attend_n', BOOLEAN(), server_default=text('0')),
               Column(u'charge', Money, nullable=False),
               Column(u'client_paid', Money, nullable=False),
               Column(u'insurance_paid', Money, nullable=False,
                      server_default=text('0.00')),
               Column(u'note', TEXT()),
               Column(u'cpt', types.String(6), ForeignKey('Procedure.cpt')),
               Column(u'claim_uid', TextCode),
               Column(u'bill_date', DATE()),
               Column(u'check_date', DATE()),
               Column(u'Client_id', INTEGER(),
                      ForeignKey('Client.id', ondelete="CASCADE"),
                      nullable=False),
               Column(u'Session_id', INTEGER(),
                      ForeignKey('Session.id', ondelete="CASCADE"),
                      nullable=False),
               Column(u'id_zoho', TextCode),
               Column(u'id_dabble', TextCode),
               Column('added_time', TIMESTAMP()),
               Column('added_user', TextCode),
               Column('modified_time', TIMESTAMP()),
               Column('modified_user', TextCode),
               mysql_engine='InnoDB'
               )

Index(u'visit_dabble', Visit.c.id_dabble, unique=False)
Index(u'visit_match', Visit.c.Session_id, Visit.c.Client_id, unique=False)

Batch = Table('Batch', metadata,
              Column('name', TextLine, primary_key=True),
              Column('cutoff', DATE()),
              Column('added_time', TIMESTAMP()),
              Column('added_user', TextCode),
              Column('modified_time', TIMESTAMP()),
              Column('modified_user', TextCode),
              )


class Carrier(Base):
    __tablename__ = 'Carrier'
    __table_args = dict(mysql_engine='InnoDB')

    id = Column(types.Integer, primary_key=True)
    name = Column(types.String(50), nullable=False)
    address = Column(types.String(50), nullable=False)
    city_st_zip = Column(types.String(50), nullable=False)

Index('carrier_name', Carrier.__table__.c.name, unique=True)


class Diagnosis(Base):
    __tablename__ = 'Diagnosis'
    __table_args = dict(mysql_engine='InnoDB')
    icd9 = Column(types.String(8), primary_key=True)
    name = Column(TextLine)


class Procedure(Base):
    __tablename__ = 'Procedure'
    __table_args = dict(mysql_engine='InnoDB')
    cpt = Column(types.String(6), primary_key=True)
    name = Column(TextLine)
    price = Column(Money, nullable=False)


class Insurance(IntId, Audited, Base):
    __tablename__ = 'Insurance'
    __table_args = dict(mysql_engine='InnoDB')

    Carrier_id = Column(INTEGER(),
           ForeignKey('Carrier.id', ondelete="CASCADE"),
           nullable=False)
    carrier = orm.relationship('Carrier')

    # for office use, reports, etc
    notice = Column(TextLine)
    details = Column(TEXT())

    deductible = Column(TextLine)
    copay = Column(Money)
    deductible_met = Column(BOOLEAN())
    
    # Field 1 from user_print_file_spec.csv
    payer_type = Column(types.Enum('Medicare',
                                   'Medicaid',
                                   'Group Health Plan',
                                   'Other'), nullable=False)
    id_number = Column(types.String(30), nullable=False)
    # Field 2
    # Column('patient_name', types.String(30), nullable=False),
    Client_id = Column(INTEGER(),
           ForeignKey('Client.id', ondelete="CASCADE"),
           nullable=False)
    client = orm.relationship('Client')
    # Field 3
    #Column('patient_dob', types.Date, nullable=False),
    patient_sex = Column(types.Enum('M', 'F'), nullable=False)
    # Field 4
    insured_name = Column(types.String(30), nullable=False)
    # Field 5: see Client
    # Field 6
    patient_rel = Column(types.Enum('Self', 'Spouse', 'Child', 'Other'),
           nullable=False)
    # Field 7
    insured_address = Column(types.String(30), nullable=False)
    insured_city = Column(types.String(24), nullable=False)
    insured_state = Column(types.String(3), nullable=False)
    insured_zip = Column(types.String(12), nullable=False)
    insured_phone = Column(types.String(15))
    # Field 8
    patient_status = Column(types.Enum('Single', 'Married', 'Other'))
    patient_status2 = Column(types.Enum('Employed',
                                        'Full Time Student',
                                        'Part Time Student'))
    # skip 10
    # Field 11
    insured_policy = Column(types.String(30))
    # Field 11a
    insured_dob = Column(types.Date)
    insured_sex = Column(types.Enum('M', 'F'))
    # 12, 13 are blank; skip 14-18; 19 is reserved
    # 20 is computed per-claim
    # Field 21
    dx1 = Column(types.String(8), ForeignKey('Diagnosis.icd9'), nullable=False)
    dx2 = Column(types.String(8), ForeignKey('Diagnosis.icd9'))
    # Field 23
    approval = Column(TEXT())


Index('insurance_client', Insurance.__table__.c.Client_id, unique=True)


users =  Table('users', metadata,
               Column(u'username', TextLine, primary_key=True, nullable=False),
               Column(u'role', Enum('READ ONLY', 'EDIT', 'DELETE',
                                    'OWNER', 'REVIEWER',
                                    'USER', 'ADMIN', 'MANAGER')),
               Column('added_time', TIMESTAMP()),
               Column('added_user', TextCode),
               Column('modified_time', TIMESTAMP()),
               Column('modified_user', TextCode),
               mysql_engine='InnoDB'
               )


def add_columns_ddl(engine, table, colnames):
    r'''
    Aha... this is how to get a string version of the column type:
    >>> print Procedure.__table__.columns['price'].type.compile()
    DECIMAL

    ### e = create_engine('mysql+mysqldb://')
    >>> e = create_engine('sqlite:///')
    >>> add_columns_ddl(e, Procedure.__table__, ['price'])
    'ALTER TABLE "Procedure"\nADD COLUMN price DECIMAL'

    >>> print add_columns_ddl(e, Procedure.__table__, ['name', 'price'])
    ALTER TABLE "Procedure"
    ADD COLUMN name VARCHAR(120),
    ADD COLUMN price DECIMAL
    '''

    dialect = engine.dialect
    tablespec = dialect.identifier_preparer.format_table(table)
    return "ALTER TABLE %s%s" % (
        tablespec,
        ','.join(['\nADD COLUMN %s %s' % (
                    col,
                    table.columns[col].type.compile())  # dialect
            for col in colnames])
        )


def migration_add_price():
    e = create_engine('mysql+mysqldb:///')
    print add_columns_ddl(e, Procedure.__table__, ['price'])


def migration_add_court():
    e = create_engine('mysql+mysqldb:///')
    print add_columns_ddl(e, Client.__table__,
                          ['Lawyer_id',
                           'Court_id'])


def print_sql(m, schema='hh_office'):
    e = create_engine('mysql+mysqldb:///')
    print 'use %s;' % schema
    for t in m.sorted_tables:
        print CreateTable(t, bind=e), ';'


if __name__ == '__main__':
    print_sql(metadata)
